# Generated by Django 5.1.6 on 2025-05-23 17:46

import django.core.validators
import django.db.models.deletion
import django_bleach.models
import fairdm.db.fields
import fairdm_geo.vocabularies.odm2
import heat_flow.vocabularies
import partial_date.fields
import research_vocabs.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("dataset", "0002_initial"),
        ("geologic_time", "0001_initial"),
        ("literature", "0004_alter_literatureitem_options"),
        ("lithology", "0001_initial"),
        ("measurement", "0002_initial"),
        ("sample", "0001_initial"),
        ("stratigraphy", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="IntervalConductivity",
            fields=[
                (
                    "measurement_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="measurement.measurement",
                    ),
                ),
                (
                    "value",
                    fairdm.db.fields.DecimalQuantityField(
                        base_units="W/mK",
                        blank=True,
                        decimal_places=2,
                        help_text="Mean conductivity in vertical direction representative for the interval of heat-flow determination. In best case, the value reflects the true in-situ conditions for the corresponding heat-flow interval.",
                        max_digits=4,
                        null=True,
                        unit_choices=["W/mK"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Mean thermal conductivity",
                    ),
                ),
                (
                    "uncertainty",
                    fairdm.db.fields.DecimalQuantityField(
                        base_units="W/mK",
                        blank=True,
                        decimal_places=2,
                        help_text="Uncertainty (one standard deviation) of mean thermal conductivity.",
                        max_digits=4,
                        null=True,
                        unit_choices=["W/mK"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="uncertainty",
                    ),
                ),
                (
                    "source",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Nature of the samples from which the mean thermal conductivity was determined.",
                        max_length=23,
                        null=True,
                        verbose_name="source",
                        vocabulary=heat_flow.vocabularies.ConductivitySource,
                    ),
                ),
                (
                    "location",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Location of conductivity data used for heat-flow calculation.",
                        max_length=10,
                        null=True,
                        verbose_name="location",
                        vocabulary=heat_flow.vocabularies.ConductivityLocation,
                    ),
                ),
                (
                    "method",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Method used to determine mean thermal conductivity.",
                        max_length=20,
                        null=True,
                        verbose_name="method",
                        vocabulary=heat_flow.vocabularies.ConductivityMethod,
                    ),
                ),
                (
                    "saturation",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Saturation state of the studied rock interval studied for thermal conductivity.",
                        max_length=19,
                        null=True,
                        verbose_name="saturation state",
                        vocabulary=heat_flow.vocabularies.ConductivitySaturation,
                    ),
                ),
                (
                    "pT_conditions",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Qualified conditions of pressure and temperature under which the mean thermal conductivity used for the heat-flow computation was determined.",
                        max_length=17,
                        null=True,
                        verbose_name="pT conditions",
                        vocabulary=heat_flow.vocabularies.ConductivityPTConditions,
                    ),
                ),
                (
                    "pT_function",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Technique or approach used to correct the measured thermal conductivity towards in-situ pressure (p) and/or temperature (T)  conditions.",
                        max_length=24,
                        null=True,
                        verbose_name="pT function",
                        vocabulary=heat_flow.vocabularies.ConductivityPTFunction,
                    ),
                ),
                (
                    "strategy",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Strategy that was employed to estimate the thermal conductivity over the vertical interval of heat-flow determination.",
                        max_length=12,
                        null=True,
                        verbose_name="averaging methodology",
                        vocabulary=heat_flow.vocabularies.ConductivityStrategy,
                    ),
                ),
                (
                    "number",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of discrete conductivity determinations used to determine the mean thermal conductivity, e.g. number of rock samples with a conductivity value used, or number of thermistors used by probe sensing techniques. Not the repetition of one measurement on one rock sample or one thermistor.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(10000)],
                        verbose_name="number",
                    ),
                ),
            ],
            options={
                "verbose_name": "Thermal Conductivity",
                "verbose_name_plural": "Thermal Conductivities",
                "db_table_comment": "Thermal conductivity determined over a given length interval (as opposed to discrete thermal conductivity)",
            },
            bases=("measurement.measurement",),
        ),
        migrations.CreateModel(
            name="SurfaceHeatFlow",
            fields=[
                (
                    "measurement_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="measurement.measurement",
                    ),
                ),
                (
                    "value",
                    fairdm.db.fields.QuantityField(
                        base_units="mW / m^2",
                        help_text="Heat-flow density at a given location after all corrections for instrumental and environmental effects have been applied.",
                        unit_choices=["mW / m^2"],
                        validators=[
                            django.core.validators.MinValueValidator(-1000000),
                            django.core.validators.MaxValueValidator(1000000),
                        ],
                        verbose_name="heat flow",
                    ),
                ),
                (
                    "uncertainty",
                    fairdm.db.fields.QuantityField(
                        base_units="mW / m^2",
                        blank=True,
                        help_text="Uncertainty (one standard deviation) of the heat-flow value estimated by error propagation from uncertainty in thermal conductivity and temperature gradient, standard deviation from the average of the heat flow intervals or deviation from the linear regression of the Bullard plot.",
                        null=True,
                        unit_choices=["mW / m^2"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000000),
                        ],
                        verbose_name="uncertainty",
                    ),
                ),
                (
                    "p_comment",
                    django_bleach.models.BleachField(
                        blank=True,
                        help_text="General comments on the parent level.",
                        null=True,
                        verbose_name="comment",
                    ),
                ),
                (
                    "corr_HP_flag",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text="Specifies if corrections to the calculated heat flow considers the contribution of the heat production of the overburden to the terrestrial surface heat flow q.",
                        null=True,
                        verbose_name="HP correction flag",
                    ),
                ),
                (
                    "is_ghfdb",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates whether the data entry is part of the Global Heat Flow Database (GHFDB) or not.",
                        verbose_name="GHFDB flag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Surface Heat Flow",
                "verbose_name_plural": "Surface Heat Flow",
                "db_table_comment": "Heat flux at Earth's surface for a given HeatFlowSite. This table roughly correlates to the parent level of the GHFDB schema.",
            },
            bases=("measurement.measurement",),
        ),
        migrations.CreateModel(
            name="ThermalGradient",
            fields=[
                (
                    "measurement_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="measurement.measurement",
                    ),
                ),
                (
                    "value",
                    fairdm.db.fields.DecimalQuantityField(
                        base_units="K/km",
                        blank=True,
                        db_comment="Calculated or inferred temperature gradient.",
                        decimal_places=2,
                        help_text="Mean thermal gradient measured over a given length interval.",
                        max_digits=7,
                        null=True,
                        unit_choices=["K/km"],
                        validators=[
                            django.core.validators.MinValueValidator(-100000),
                            django.core.validators.MaxValueValidator(100000),
                        ],
                        verbose_name="thermal gradient",
                    ),
                ),
                (
                    "uncertainty",
                    fairdm.db.fields.DecimalQuantityField(
                        base_units="K/km",
                        blank=True,
                        db_comment="Uncertainty of the thermal gradient.",
                        decimal_places=2,
                        help_text="Uncertainty (1 sigma) of mean measured temperature gradient as estimated through error propagation from uncertainty in the top and bottom temperature determinations or deviation from the linear regression of the temperature-depth data.",
                        max_digits=7,
                        null=True,
                        unit_choices=["K/km"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100000),
                        ],
                        verbose_name="uncertainty",
                    ),
                ),
                (
                    "corrected_value",
                    fairdm.db.fields.DecimalQuantityField(
                        base_units="K/km",
                        blank=True,
                        db_comment="Mean corrected temperature gradient.",
                        decimal_places=2,
                        help_text="Mean temperature gradient corrected for borehole and environmental effects.",
                        max_digits=5,
                        null=True,
                        unit_choices=["K/km"],
                        validators=[
                            django.core.validators.MinValueValidator(-100000),
                            django.core.validators.MaxValueValidator(100000),
                        ],
                        verbose_name="corrected gradient",
                    ),
                ),
                (
                    "corrected_uncertainty",
                    fairdm.db.fields.DecimalQuantityField(
                        base_units="K/km",
                        blank=True,
                        db_comment="Uncertainty of the corrected temperature gradient.",
                        decimal_places=2,
                        help_text="Uncertainty (1 sigma) of  mean corrected temperature gradient as estimated through error propagation from uncertainty in the top and bottom temperature determinations or deviation from the linear regression of the temperature depth data.",
                        max_digits=5,
                        null=True,
                        unit_choices=["K/km"],
                        validators=[
                            django.core.validators.MinValueValidator(-100000),
                            django.core.validators.MaxValueValidator(100000),
                        ],
                        verbose_name="corrected uncertainty",
                    ),
                ),
                (
                    "method_top",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        db_comment="Method used for temperature determination at the top of the heat-flow determination interval.",
                        help_text="Method used for temperature determination at the top of the heat-flow determination interval.",
                        max_length=7,
                        null=True,
                        verbose_name="method (top)",
                        vocabulary=heat_flow.vocabularies.TemperatureMethod,
                    ),
                ),
                (
                    "method_bottom",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        db_comment="Method used for temperature determination at the bottom of the heat-flow determination interval.",
                        help_text="Method used for temperature determination at the bottom of the heat-flow determination interval.",
                        max_length=7,
                        null=True,
                        verbose_name="method (bottom)",
                        vocabulary=heat_flow.vocabularies.TemperatureMethod,
                    ),
                ),
                (
                    "shutin_top",
                    fairdm.db.fields.PositiveIntegerQuantityField(
                        base_units="hour",
                        blank=True,
                        help_text="Time of measurement at the interval top in relation to the end values measured during the drilling are equal to zero.",
                        null=True,
                        unit_choices=["hour"],
                        validators=[django.core.validators.MaxValueValidator(10000)],
                        verbose_name="shut-in time (top)",
                    ),
                ),
                (
                    "shutin_bottom",
                    fairdm.db.fields.PositiveIntegerQuantityField(
                        base_units="hour",
                        blank=True,
                        help_text="Time of measurement at the interval bottom in relation to the end values measured during the drilling are equal to zero.",
                        null=True,
                        unit_choices=["hour"],
                        validators=[django.core.validators.MaxValueValidator(10000)],
                        verbose_name="shut-in time (bottom)",
                    ),
                ),
                (
                    "correction_top",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Approach applied to correct the temperature measurement for drilling perturbations at the top of the interval used for heat-flow determination.",
                        max_length=19,
                        null=True,
                        verbose_name="correction method (top)",
                        vocabulary=heat_flow.vocabularies.TemperatureCorrection,
                    ),
                ),
                (
                    "correction_bottom",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Approach applied to correct the temperature measurement for drilling perturbations at the bottom of the interval used for heat-flow determination.",
                        max_length=19,
                        null=True,
                        verbose_name="correction method (bottom)",
                        vocabulary=heat_flow.vocabularies.TemperatureCorrection,
                    ),
                ),
                (
                    "number",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of discrete temperature points (e.g. number of used BHT values, log values or thermistors used in probe sensing) confirming the mean temperature gradient [T_grad_mean_meas]. NOT the repetition of one measurement at a certain depth.",
                        null=True,
                        verbose_name="Number of temperature recordings",
                    ),
                ),
            ],
            options={
                "verbose_name": "Thermal Gradient",
                "verbose_name_plural": "Thermal Gradients",
                "db_table_comment": "temperature gradient data related to child heat flow measurements",
            },
            bases=("measurement.measurement",),
        ),
        migrations.CreateModel(
            name="HeatFlowInterval",
            fields=[
                (
                    "sample_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="sample.sample",
                    ),
                ),
                (
                    "top",
                    fairdm.db.fields.QuantityField(
                        base_units="m",
                        blank=True,
                        help_text="The distance to the top of the vertical interval relative to the vertical datum.",
                        null=True,
                        unit_choices=["m"],
                        verbose_name="top",
                    ),
                ),
                (
                    "bottom",
                    fairdm.db.fields.QuantityField(
                        base_units="m",
                        blank=True,
                        help_text="The distance to the bottom of the vertical interval relative to the vertical datum.",
                        null=True,
                        unit_choices=["m"],
                        verbose_name="bottom",
                    ),
                ),
                (
                    "vertical_depth",
                    fairdm.db.fields.QuantityField(
                        base_units="m",
                        blank=True,
                        editable=False,
                        help_text="The total depth of the vertical interval, calculated as the absolute difference between the interval top and interval bottom.",
                        null=True,
                        unit_choices=["m"],
                        verbose_name="vertical depth",
                    ),
                ),
                (
                    "vertical_datum",
                    models.CharField(
                        choices=[("MSL", "Mean Sea Level")],
                        default="MSL",
                        editable=False,
                        help_text="The vertical datum used to determine depth measurements.",
                        max_length=255,
                        verbose_name="vertical datum",
                    ),
                ),
                (
                    "age",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The geologic age of the interval.",
                        to="geologic_time.geologicaltimescale",
                        verbose_name="geologic age",
                    ),
                ),
                (
                    "lithology",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The lithology of the interval.",
                        to="lithology.simplelithology",
                        verbose_name="lithology",
                    ),
                ),
                (
                    "stratigraphy",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The stratigraphy of the interval.",
                        to="stratigraphy.stratigraphicunit",
                        verbose_name="stratigraphy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Depth interval",
                "verbose_name_plural": "Depth intervals",
            },
            bases=("sample.sample",),
        ),
        migrations.CreateModel(
            name="HeatFlowSite",
            fields=[
                (
                    "sample_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="sample.sample",
                    ),
                ),
                (
                    "azimuth",
                    fairdm.db.fields.QuantityField(
                        base_units="deg",
                        blank=True,
                        help_text="The horizontal angle relative to a reference direction.",
                        null=True,
                        unit_choices=["deg"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(360),
                        ],
                        verbose_name="azimuth",
                    ),
                ),
                (
                    "inclination",
                    fairdm.db.fields.QuantityField(
                        base_units="deg",
                        blank=True,
                        help_text="The vertical angle relative to the horizontal plane where 90 is true vertical.",
                        null=True,
                        unit_choices=["deg"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(90),
                        ],
                        verbose_name="inclination",
                    ),
                ),
                (
                    "length",
                    fairdm.db.fields.QuantityField(
                        base_units="m",
                        blank=True,
                        help_text="The total length of the hole.",
                        null=True,
                        unit_choices=["m"],
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="hole length",
                    ),
                ),
                (
                    "top",
                    fairdm.db.fields.QuantityField(
                        base_units="m",
                        blank=True,
                        help_text="The distance to the top of the vertical interval relative to the vertical datum.",
                        null=True,
                        unit_choices=["m"],
                        verbose_name="top",
                    ),
                ),
                (
                    "bottom",
                    fairdm.db.fields.QuantityField(
                        base_units="m",
                        blank=True,
                        help_text="The distance to the bottom of the vertical interval relative to the vertical datum.",
                        null=True,
                        unit_choices=["m"],
                        verbose_name="bottom",
                    ),
                ),
                (
                    "vertical_depth",
                    fairdm.db.fields.QuantityField(
                        base_units="m",
                        blank=True,
                        editable=False,
                        help_text="The total depth of the vertical interval, calculated as the absolute difference between the interval top and interval bottom.",
                        null=True,
                        unit_choices=["m"],
                        verbose_name="vertical depth",
                    ),
                ),
                (
                    "vertical_datum",
                    models.CharField(
                        choices=[("MSL", "Mean Sea Level")],
                        default="MSL",
                        editable=False,
                        help_text="The vertical datum used to determine depth measurements.",
                        max_length=255,
                        verbose_name="vertical datum",
                    ),
                ),
                (
                    "type",
                    research_vocabs.fields.ConceptField(
                        default="unknown",
                        help_text="The type of sampling location.",
                        max_length=33,
                        verbose_name="type",
                        vocabulary=fairdm_geo.vocabularies.odm2.SiteType,
                    ),
                ),
                (
                    "elevation_datum",
                    research_vocabs.fields.ConceptField(
                        default="MSL",
                        max_length=7,
                        verbose_name="",
                        vocabulary=fairdm_geo.vocabularies.odm2.ElevationDatum,
                    ),
                ),
                (
                    "elevation",
                    fairdm.db.fields.QuantityField(
                        base_units="m",
                        blank=True,
                        help_text="The site elevation in meters with reference to the specified elevation datum.",
                        null=True,
                        unit_choices=["m", "ft"],
                        verbose_name="elevation",
                    ),
                ),
                (
                    "environment",
                    research_vocabs.fields.ConceptField(
                        default="unspecified",
                        help_text="Describes the general geographical setting of the heat-flow site (not the applied methodology).",
                        max_length=20,
                        verbose_name="basic geographical environment",
                        vocabulary=heat_flow.vocabularies.GeographicEnvironment,
                    ),
                ),
                (
                    "explo_method",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Specification of the general means by which the rock was accessed by temperature sensors for the respective data entry.",
                        max_length=16,
                        null=True,
                        verbose_name="exploration method",
                        vocabulary=heat_flow.vocabularies.ExplorationMethod,
                    ),
                ),
                (
                    "explo_purpose",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Main purpose of the reconnaissance target providing access for the temperature sensors.",
                        max_length=19,
                        null=True,
                        verbose_name="exploration purpose",
                        vocabulary=heat_flow.vocabularies.ExplorationPurpose,
                    ),
                ),
                (
                    "age",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The geologic age of the interval.",
                        to="geologic_time.geologicaltimescale",
                        verbose_name="geologic age",
                    ),
                ),
                (
                    "lithology",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The lithology of the interval.",
                        to="lithology.simplelithology",
                        verbose_name="lithology",
                    ),
                ),
                (
                    "stratigraphy",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The stratigraphy of the interval.",
                        to="stratigraphy.stratigraphicunit",
                        verbose_name="stratigraphy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Heat Flow Site",
                "verbose_name_plural": "Heat Flow Sites",
                "db_table_comment": "A geographic location where heat flow data has been collected. Multiple heat flow measurements may be associated with a single site.",
            },
            bases=("sample.sample",),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    partial_date.fields.PartialDateField(
                        help_text="Date the review started.", verbose_name="start date"
                    ),
                ),
                (
                    "completion_date",
                    partial_date.fields.PartialDateField(
                        blank=True,
                        help_text="Date the review was completed.",
                        null=True,
                        verbose_name="completion date",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Review pending"),
                            (2, "Review accepted"),
                            (0, "Review rejected"),
                        ],
                        default=1,
                        help_text="The status of the review.",
                        verbose_name="status",
                    ),
                ),
                (
                    "comment",
                    django_bleach.models.BleachField(
                        blank=True,
                        help_text="General comment on the review.",
                        null=True,
                        verbose_name="comment",
                    ),
                ),
                (
                    "dataset",
                    models.OneToOneField(
                        help_text="The dataset that was reviewed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review",
                        to="dataset.dataset",
                        verbose_name="dataset",
                    ),
                ),
                (
                    "literature",
                    models.OneToOneField(
                        help_text="The literature item that was reviewed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review",
                        to="literature.literatureitem",
                        verbose_name="literature",
                    ),
                ),
                (
                    "reviewers",
                    models.ManyToManyField(
                        help_text="Users who have reviewed the data.",
                        related_name="heat_flow_reviews",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="reviewers",
                    ),
                ),
            ],
            options={
                "verbose_name": "Review",
                "verbose_name_plural": "Reviews",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="HeatFlow",
            fields=[
                (
                    "measurement_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="measurement.measurement",
                    ),
                ),
                (
                    "value",
                    fairdm.db.fields.QuantityField(
                        base_units="mW / m^2",
                        help_text="Heat-flow density at a given location after all corrections for instrumental and environmental effects have been applied.",
                        unit_choices=["mW / m^2"],
                        validators=[
                            django.core.validators.MinValueValidator(-1000000),
                            django.core.validators.MaxValueValidator(1000000),
                        ],
                        verbose_name="heat flow",
                    ),
                ),
                (
                    "uncertainty",
                    fairdm.db.fields.QuantityField(
                        base_units="mW / m^2",
                        blank=True,
                        help_text="The uncertainty (1 sigma) of the heat-flow value. Uncertainty is estimated by propagating errors from uncertainties in thermal conductivity and temperature gradient. Alternatively, it can be determined by the deviation from the linear regression of the Bullard plot, with preference given to corrected values over directly measured gradients.",
                        null=True,
                        unit_choices=["mW / m^2"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000000),
                        ],
                        verbose_name="uncertainty",
                    ),
                ),
                (
                    "method",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Principal method of heat-flow calculation from temperature and thermal conductivity data.",
                        max_length=9,
                        null=True,
                        verbose_name="method",
                        vocabulary=heat_flow.vocabularies.HeatFlowMethod,
                    ),
                ),
                (
                    "expedition",
                    models.CharField(
                        blank=True,
                        help_text="Specification of the expedition, cruise, platform or research vessel where the marine heat flow survey was conducted.",
                        max_length=255,
                        null=True,
                        verbose_name="expedition/platform/ship",
                    ),
                ),
                (
                    "relevant_child",
                    models.BooleanField(
                        default=False,
                        help_text="Specify whether the child entry is used for computation of representative location heat flow values at the parent level or not.",
                        verbose_name="Relevant child",
                    ),
                ),
                (
                    "probe_penetration",
                    fairdm.db.fields.DecimalQuantityField(
                        base_units="m",
                        blank=True,
                        decimal_places=2,
                        help_text="Penetration depth of marine heat-flow probe.",
                        max_digits=5,
                        null=True,
                        unit_choices=["m"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="probe penetration",
                    ),
                ),
                (
                    "probe_type",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        help_text="Type of heat-flow probe used for measurement.",
                        max_length=11,
                        null=True,
                        verbose_name="probe type",
                        vocabulary=heat_flow.vocabularies.ProbeType,
                    ),
                ),
                (
                    "probe_length",
                    fairdm.db.fields.DecimalQuantityField(
                        base_units="m",
                        blank=True,
                        decimal_places=2,
                        help_text="Length of marine heat-flow probe.",
                        max_digits=5,
                        null=True,
                        unit_choices=["m"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="probe length",
                    ),
                ),
                (
                    "probe_tilt",
                    fairdm.db.fields.DecimalQuantityField(
                        base_units="°",
                        blank=True,
                        decimal_places=2,
                        help_text="Tilt angle of marine heat-flow probe.",
                        max_digits=4,
                        null=True,
                        unit_choices=["°"],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(90),
                        ],
                        verbose_name="probe tilt",
                    ),
                ),
                (
                    "water_temperature",
                    fairdm.db.fields.QuantityField(
                        base_units="°C",
                        blank=True,
                        help_text="Seafloor temperature where surface heat-flow value (q) is taken. e.g. PT 100 or Mudline temperature for ocean drilling data.",
                        null=True,
                        unit_choices=["°C", "K"],
                        validators=[
                            django.core.validators.MinValueValidator(-10),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="bottom water temperature",
                    ),
                ),
                (
                    "corr_IS_flag",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        default="unspecified",
                        help_text="Specifies whether the in-situ pressure and temperature conditions were considered to the reported thermal conductivity value or not.",
                        max_length=23,
                        null=True,
                        verbose_name="Correction (IS)",
                        vocabulary=heat_flow.vocabularies.GenericFlagChoices,
                    ),
                ),
                (
                    "corr_T_flag",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        default="unspecified",
                        help_text="Specifies whether the in-situ pressure and temperature conditions were considered to the reported thermal conductivity value or not.",
                        max_length=23,
                        null=True,
                        verbose_name="Correction (T)",
                        vocabulary=heat_flow.vocabularies.GenericFlagChoices,
                    ),
                ),
                (
                    "corr_S_flag",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        default="unspecified",
                        help_text="Specifies if sedimentation/subsidence effects with respect to the reported heat-flow value were present and if corrections were performed.",
                        max_length=23,
                        null=True,
                        verbose_name="Correction (S)",
                        vocabulary=heat_flow.vocabularies.GenericFlagChoices,
                    ),
                ),
                (
                    "corr_E_flag",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        default="unspecified",
                        help_text="Specifies if erosion effects with respect to the reported heat-flow value were present and if corrections were performed.",
                        max_length=23,
                        null=True,
                        verbose_name="Correction (E)",
                        vocabulary=heat_flow.vocabularies.GenericFlagChoices,
                    ),
                ),
                (
                    "corr_TOPO_flag",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        default="unspecified",
                        help_text="Specifies if topographic effects with respect to the reported heat-flow value were present and if corrections were performed.",
                        max_length=23,
                        null=True,
                        verbose_name="Correction (TOPO)",
                        vocabulary=heat_flow.vocabularies.GenericFlagChoices,
                    ),
                ),
                (
                    "corr_PAL_flag",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        default="unspecified",
                        help_text="Specifies if topographic effects with respect to the reported heat-flow value were present and if corrections were performed.",
                        max_length=23,
                        null=True,
                        verbose_name="Correction (PAL)",
                        vocabulary=heat_flow.vocabularies.GenericFlagChoices,
                    ),
                ),
                (
                    "corr_SUR_flag",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        default="unspecified",
                        help_text="Specifies if climatic conditions (glaciation, post-industrial warming, etc.) with respect to the reported heat-flow value were present and if corrections were performed.",
                        max_length=23,
                        null=True,
                        verbose_name="Correction (SUR)",
                        vocabulary=heat_flow.vocabularies.GenericFlagChoices,
                    ),
                ),
                (
                    "corr_CONV_flag",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        default="unspecified",
                        help_text="Specifies if convection effects with respect to the reported heat-flow value were present and if corrections were performed.",
                        max_length=23,
                        null=True,
                        verbose_name="Correction (CONV)",
                        vocabulary=heat_flow.vocabularies.GenericFlagChoices,
                    ),
                ),
                (
                    "corr_HR_flag",
                    research_vocabs.fields.ConceptField(
                        blank=True,
                        default="unspecified",
                        help_text="Specifies if refraction effects, e.g., due to significant local conductivity contrasts, with respect to the reported heat-flow value were present and if corrections were performed. ",
                        max_length=23,
                        null=True,
                        verbose_name="Correction (HR)",
                        vocabulary=heat_flow.vocabularies.GenericFlagChoices,
                    ),
                ),
                (
                    "c_comment",
                    django_bleach.models.BleachField(
                        blank=True,
                        help_text="General comments on the child level.",
                        null=True,
                        verbose_name="comment",
                    ),
                ),
                (
                    "thermal_conductivity",
                    models.OneToOneField(
                        blank=True,
                        help_text="Thermal conductivity value used for heat-flow calculation.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="heat_flow_child",
                        to="heat_flow.intervalconductivity",
                        verbose_name="thermal conductivity",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="parent heat flow site",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="heat_flow.surfaceheatflow",
                        verbose_name="parent",
                    ),
                ),
                (
                    "thermal_gradient",
                    models.OneToOneField(
                        blank=True,
                        help_text="Temperature gradient value used for heat-flow calculation.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="heat_flow_child",
                        to="heat_flow.thermalgradient",
                        verbose_name="temperature gradient",
                    ),
                ),
            ],
            options={
                "verbose_name": "Heat Flow",
                "verbose_name_plural": "Heat Flow",
                "db_table_comment": "Global Heat Flow Database (GHFDB) child table.",
                "ordering": ["parent", "relevant_child"],
            },
            bases=("measurement.measurement",),
        ),
    ]
